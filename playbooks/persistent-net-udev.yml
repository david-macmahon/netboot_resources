# Create host specific udev rules for network interface naming.  This info
# comes from the inventory host variable `net_iface` which should be a
# dictionary whose keys are the desired interface names and whose values are
# also dictionaries.  If the interface name dictionary has a `udev` key, the
# string value will be included in a 60-persistent-network.rules file in the
# corresponding host's /persistent/etc/udev/rules.d directory.
#
# If an interface does not have a `udev` key no udev rules file will be created
# for that interface and any existing udev rules file will be left unmodified.
---
- hosts: head_nodes
  gather_facts: false
  become: true
  tasks:
    - name: create rules.d directories for netboot hosts
      file:
        path: "{{ persistent_root }}/{{ hostvars[item].canonical_name }}/etc/udev/rules.d"
        owner: "root"
        group: "root"
        mode: "0755"
        state: directory
      loop: "{{ groups.netboot_nodes }}"

    - name: create 60-persistent-network.rules files for netboot hosts
      copy:
        content: |
          SUBSYSTEM=="net", ACTION=="add", {{ match }}, NAME="{{ iface }}"
        dest: "{{ persistent_root }}/{{ hostvars[host].canonical_name }}/etc/udev/rules.d/60-persistent-network-{{ item.iface }}.rules"
      vars:
        host: "{{ item.host }}"
        iface: "{{ item.iface }}"
        match: '{{ item.match }}'
      loop: >
        [
          {% for host in groups.netboot_nodes if hostvars[host].net_ifaces is defined %}
          {%   for iface in hostvars[host].net_ifaces if hostvars[host].net_ifaces[iface].udev is defined %}
          {%     set match = hostvars[host].net_ifaces[iface].udev %}
                 {
                   "host": "{{ host }}",
                   "iface": "{{ iface }}",
                   "match": '{{ match }}'
                 },
          {%   endfor %}
          {% endfor %}
        ]
      loop_control:
        label: "{{ host }}:{{ iface }}"
